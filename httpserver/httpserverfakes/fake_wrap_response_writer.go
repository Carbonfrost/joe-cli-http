// Copyright 2023 The Joe-cli Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.
// Code generated by counterfeiter. DO NOT EDIT.
package httpserverfakes

import (
	"io"
	"net/http"
	"sync"
)

type FakeWrapResponseWriter struct {
	BytesWrittenStub        func() int
	bytesWrittenMutex       sync.RWMutex
	bytesWrittenArgsForCall []struct {
	}
	bytesWrittenReturns struct {
		result1 int
	}
	bytesWrittenReturnsOnCall map[int]struct {
		result1 int
	}
	HeaderStub        func() http.Header
	headerMutex       sync.RWMutex
	headerArgsForCall []struct {
	}
	headerReturns struct {
		result1 http.Header
	}
	headerReturnsOnCall map[int]struct {
		result1 http.Header
	}
	StatusStub        func() int
	statusMutex       sync.RWMutex
	statusArgsForCall []struct {
	}
	statusReturns struct {
		result1 int
	}
	statusReturnsOnCall map[int]struct {
		result1 int
	}
	TeeStub        func(io.Writer)
	teeMutex       sync.RWMutex
	teeArgsForCall []struct {
		arg1 io.Writer
	}
	UnwrapStub        func() http.ResponseWriter
	unwrapMutex       sync.RWMutex
	unwrapArgsForCall []struct {
	}
	unwrapReturns struct {
		result1 http.ResponseWriter
	}
	unwrapReturnsOnCall map[int]struct {
		result1 http.ResponseWriter
	}
	WriteStub        func([]byte) (int, error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 []byte
	}
	writeReturns struct {
		result1 int
		result2 error
	}
	writeReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	WriteHeaderStub        func(int)
	writeHeaderMutex       sync.RWMutex
	writeHeaderArgsForCall []struct {
		arg1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWrapResponseWriter) BytesWritten() int {
	fake.bytesWrittenMutex.Lock()
	ret, specificReturn := fake.bytesWrittenReturnsOnCall[len(fake.bytesWrittenArgsForCall)]
	fake.bytesWrittenArgsForCall = append(fake.bytesWrittenArgsForCall, struct {
	}{})
	stub := fake.BytesWrittenStub
	fakeReturns := fake.bytesWrittenReturns
	fake.recordInvocation("BytesWritten", []interface{}{})
	fake.bytesWrittenMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeWrapResponseWriter) BytesWrittenCallCount() int {
	fake.bytesWrittenMutex.RLock()
	defer fake.bytesWrittenMutex.RUnlock()
	return len(fake.bytesWrittenArgsForCall)
}

func (fake *FakeWrapResponseWriter) BytesWrittenCalls(stub func() int) {
	fake.bytesWrittenMutex.Lock()
	defer fake.bytesWrittenMutex.Unlock()
	fake.BytesWrittenStub = stub
}

func (fake *FakeWrapResponseWriter) BytesWrittenReturns(result1 int) {
	fake.bytesWrittenMutex.Lock()
	defer fake.bytesWrittenMutex.Unlock()
	fake.BytesWrittenStub = nil
	fake.bytesWrittenReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeWrapResponseWriter) BytesWrittenReturnsOnCall(i int, result1 int) {
	fake.bytesWrittenMutex.Lock()
	defer fake.bytesWrittenMutex.Unlock()
	fake.BytesWrittenStub = nil
	if fake.bytesWrittenReturnsOnCall == nil {
		fake.bytesWrittenReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.bytesWrittenReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeWrapResponseWriter) Header() http.Header {
	fake.headerMutex.Lock()
	ret, specificReturn := fake.headerReturnsOnCall[len(fake.headerArgsForCall)]
	fake.headerArgsForCall = append(fake.headerArgsForCall, struct {
	}{})
	stub := fake.HeaderStub
	fakeReturns := fake.headerReturns
	fake.recordInvocation("Header", []interface{}{})
	fake.headerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeWrapResponseWriter) HeaderCallCount() int {
	fake.headerMutex.RLock()
	defer fake.headerMutex.RUnlock()
	return len(fake.headerArgsForCall)
}

func (fake *FakeWrapResponseWriter) HeaderCalls(stub func() http.Header) {
	fake.headerMutex.Lock()
	defer fake.headerMutex.Unlock()
	fake.HeaderStub = stub
}

func (fake *FakeWrapResponseWriter) HeaderReturns(result1 http.Header) {
	fake.headerMutex.Lock()
	defer fake.headerMutex.Unlock()
	fake.HeaderStub = nil
	fake.headerReturns = struct {
		result1 http.Header
	}{result1}
}

func (fake *FakeWrapResponseWriter) HeaderReturnsOnCall(i int, result1 http.Header) {
	fake.headerMutex.Lock()
	defer fake.headerMutex.Unlock()
	fake.HeaderStub = nil
	if fake.headerReturnsOnCall == nil {
		fake.headerReturnsOnCall = make(map[int]struct {
			result1 http.Header
		})
	}
	fake.headerReturnsOnCall[i] = struct {
		result1 http.Header
	}{result1}
}

func (fake *FakeWrapResponseWriter) Status() int {
	fake.statusMutex.Lock()
	ret, specificReturn := fake.statusReturnsOnCall[len(fake.statusArgsForCall)]
	fake.statusArgsForCall = append(fake.statusArgsForCall, struct {
	}{})
	stub := fake.StatusStub
	fakeReturns := fake.statusReturns
	fake.recordInvocation("Status", []interface{}{})
	fake.statusMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeWrapResponseWriter) StatusCallCount() int {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return len(fake.statusArgsForCall)
}

func (fake *FakeWrapResponseWriter) StatusCalls(stub func() int) {
	fake.statusMutex.Lock()
	defer fake.statusMutex.Unlock()
	fake.StatusStub = stub
}

func (fake *FakeWrapResponseWriter) StatusReturns(result1 int) {
	fake.statusMutex.Lock()
	defer fake.statusMutex.Unlock()
	fake.StatusStub = nil
	fake.statusReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeWrapResponseWriter) StatusReturnsOnCall(i int, result1 int) {
	fake.statusMutex.Lock()
	defer fake.statusMutex.Unlock()
	fake.StatusStub = nil
	if fake.statusReturnsOnCall == nil {
		fake.statusReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.statusReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeWrapResponseWriter) Tee(arg1 io.Writer) {
	fake.teeMutex.Lock()
	fake.teeArgsForCall = append(fake.teeArgsForCall, struct {
		arg1 io.Writer
	}{arg1})
	stub := fake.TeeStub
	fake.recordInvocation("Tee", []interface{}{arg1})
	fake.teeMutex.Unlock()
	if stub != nil {
		fake.TeeStub(arg1)
	}
}

func (fake *FakeWrapResponseWriter) TeeCallCount() int {
	fake.teeMutex.RLock()
	defer fake.teeMutex.RUnlock()
	return len(fake.teeArgsForCall)
}

func (fake *FakeWrapResponseWriter) TeeCalls(stub func(io.Writer)) {
	fake.teeMutex.Lock()
	defer fake.teeMutex.Unlock()
	fake.TeeStub = stub
}

func (fake *FakeWrapResponseWriter) TeeArgsForCall(i int) io.Writer {
	fake.teeMutex.RLock()
	defer fake.teeMutex.RUnlock()
	argsForCall := fake.teeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWrapResponseWriter) Unwrap() http.ResponseWriter {
	fake.unwrapMutex.Lock()
	ret, specificReturn := fake.unwrapReturnsOnCall[len(fake.unwrapArgsForCall)]
	fake.unwrapArgsForCall = append(fake.unwrapArgsForCall, struct {
	}{})
	stub := fake.UnwrapStub
	fakeReturns := fake.unwrapReturns
	fake.recordInvocation("Unwrap", []interface{}{})
	fake.unwrapMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeWrapResponseWriter) UnwrapCallCount() int {
	fake.unwrapMutex.RLock()
	defer fake.unwrapMutex.RUnlock()
	return len(fake.unwrapArgsForCall)
}

func (fake *FakeWrapResponseWriter) UnwrapCalls(stub func() http.ResponseWriter) {
	fake.unwrapMutex.Lock()
	defer fake.unwrapMutex.Unlock()
	fake.UnwrapStub = stub
}

func (fake *FakeWrapResponseWriter) UnwrapReturns(result1 http.ResponseWriter) {
	fake.unwrapMutex.Lock()
	defer fake.unwrapMutex.Unlock()
	fake.UnwrapStub = nil
	fake.unwrapReturns = struct {
		result1 http.ResponseWriter
	}{result1}
}

func (fake *FakeWrapResponseWriter) UnwrapReturnsOnCall(i int, result1 http.ResponseWriter) {
	fake.unwrapMutex.Lock()
	defer fake.unwrapMutex.Unlock()
	fake.UnwrapStub = nil
	if fake.unwrapReturnsOnCall == nil {
		fake.unwrapReturnsOnCall = make(map[int]struct {
			result1 http.ResponseWriter
		})
	}
	fake.unwrapReturnsOnCall[i] = struct {
		result1 http.ResponseWriter
	}{result1}
}

func (fake *FakeWrapResponseWriter) Write(arg1 []byte) (int, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 []byte
	}{arg1Copy})
	stub := fake.WriteStub
	fakeReturns := fake.writeReturns
	fake.recordInvocation("Write", []interface{}{arg1Copy})
	fake.writeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeWrapResponseWriter) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeWrapResponseWriter) WriteCalls(stub func([]byte) (int, error)) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = stub
}

func (fake *FakeWrapResponseWriter) WriteArgsForCall(i int) []byte {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	argsForCall := fake.writeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWrapResponseWriter) WriteReturns(result1 int, result2 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeWrapResponseWriter) WriteReturnsOnCall(i int, result1 int, result2 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeWrapResponseWriter) WriteHeader(arg1 int) {
	fake.writeHeaderMutex.Lock()
	fake.writeHeaderArgsForCall = append(fake.writeHeaderArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.WriteHeaderStub
	fake.recordInvocation("WriteHeader", []interface{}{arg1})
	fake.writeHeaderMutex.Unlock()
	if stub != nil {
		fake.WriteHeaderStub(arg1)
	}
}

func (fake *FakeWrapResponseWriter) WriteHeaderCallCount() int {
	fake.writeHeaderMutex.RLock()
	defer fake.writeHeaderMutex.RUnlock()
	return len(fake.writeHeaderArgsForCall)
}

func (fake *FakeWrapResponseWriter) WriteHeaderCalls(stub func(int)) {
	fake.writeHeaderMutex.Lock()
	defer fake.writeHeaderMutex.Unlock()
	fake.WriteHeaderStub = stub
}

func (fake *FakeWrapResponseWriter) WriteHeaderArgsForCall(i int) int {
	fake.writeHeaderMutex.RLock()
	defer fake.writeHeaderMutex.RUnlock()
	argsForCall := fake.writeHeaderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeWrapResponseWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bytesWrittenMutex.RLock()
	defer fake.bytesWrittenMutex.RUnlock()
	fake.headerMutex.RLock()
	defer fake.headerMutex.RUnlock()
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	fake.teeMutex.RLock()
	defer fake.teeMutex.RUnlock()
	fake.unwrapMutex.RLock()
	defer fake.unwrapMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	fake.writeHeaderMutex.RLock()
	defer fake.writeHeaderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWrapResponseWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
